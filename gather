#!/bin/sh
# Author: Shree Raj Shrestha
# Date: 01/28/2025
set -ueox pipefail
source ./home
source ./rake "${1}" "${2}"

function getSeed() {
    NEEDS=()
    WHICH_SEED="$(echo "${1}" | cut -d "_" -f 1)"
    source "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)/$(echo "${1}" | cut -d "_" -f 3).recipe" 
    for NEED in "${NEEDS[@]}"
    do
        if [[ ! "${COB_RESOLVED[@]}" =~ ${NEED} ]]; then
            getSeed "${NEED}"
        fi
    done

    source "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)/$(echo "${1}" | cut -d "_" -f 2).seed"
    cd "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)"

    ARCHIVE=$(echo "${URL##*/}")
    if [[ "${URL}" =~ .*.git$ ]]; then
        REPO_BASE=$(basename "${URL}")
        REPO="${REPO_BASE%.*}"
        ARCHIVE_SEED=true
        if [ -e "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)/${ARCHIVE}" ]; then
            tar -xzf "${REPO}.git"
            cd "${REPO}"
            if [ $(git rev-parse HEAD) == "${COMMIT}" ]; then
                echo "Seed is already cached, skipping download"
                cd ..
                rm -rf "${REPO}"
                ARCHIVE_SEED=false
            fi
        fi
        if "${ARCHIVE_SEED}"; then 
            rm -rf "${REPO}" && git clone --depth=1 "${URL}"
            cd "${REPO}"
            git reset --hard "${COMMIT}"
            git submodule update --init --recursive --depth 1
            cd ..
            tar czf "${REPO}.git" "${REPO}" && rm -rf "${REPO}"
        fi
    else
        if [ -e "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)/${ARCHIVE}" ] \
            && $(echo "${CHECKSUM} $(echo "${URL##*/}")" | sha256sum --check --status); then
            echo "Seed is already cached, skipping download"
        else
            curl -LO "${URL}"
            echo "${CHECKSUM} $(echo "${URL##*/}")" | sha256sum --check --status
        fi
    fi

    cd "${HUSK_HOME}"
    source "${HUSK_HOME}/silo/seeds/$(echo "${1}" | cut -d "_" -f 1)/${WHICH_SOIL}" 
    for REQUIREMENT in "${REQUIREMENTS[@]}"
    do
        if [[ "${REQUIREMENT}" =~ .*:.* ]]; then
            REQUIREMENT=$(echo "${REQUIREMENT}" |  cut -d ":" -f 1)
        fi
        if [[ ! "${SOIL_REQUIREMENTS}" =~ "${REQUIREMENT}" ]]; then
            if [[ -z "${SOIL_REQUIREMENTS}" ]]; then
                SOIL_REQUIREMENTS="${REQUIREMENT}"
            else
                SOIL_REQUIREMENTS="${SOIL_REQUIREMENTS} ${REQUIREMENT}"
            fi
        fi
    done
    if [[ ! "${COB_RESOLVED[@]}" =~ ${1} ]]; then
        COB_RESOLVED+=($1)
    fi
}

source "${HUSK_HOME}/${RAKE_PATH}"
COB_RESOLVED=()
SOIL_REQUIREMENTS=""
for SEED in "${COB[@]}"
do
    getSeed "${SEED}"
done
sed -i '/COB/d' "${HUSK_HOME}/${RAKE_PATH}"
sed -i '/SOIL_REQUIREMENTS/d' "${HUSK_HOME}/${RAKE_PATH}"
echo "COB=(${COB_RESOLVED[@]})" >> "${HUSK_HOME}/${RAKE_PATH}"
printf "\nSOIL_REQUIREMENTS=\"${SOIL_REQUIREMENTS}\"" >> "${HUSK_HOME}/${RAKE_PATH}"
sed -i '/^[[:space:]]*$/d' "${HUSK_HOME}/${RAKE_PATH}"
